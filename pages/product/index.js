import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../../styles/Home.module.css";

export default function Product({ experience, serverTime }) {
  const [clientTime, setClientTime] = useState("");

  useEffect(() => {
    setClientTime(new Date().toISOString());
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Product - {experience}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main style={{ fontSize: "22px" }} className={styles.main}>
        <code>
          Page: Product
          <br />
          Experience: {experience}
          <br />
          ServerTime: {serverTime}
          <br />
          ClientTime: {clientTime}
        </code>
      </main>
    </div>
  );
}

/*
 * The idea is to "trick" the Cloudflare to cache two (or more) versions of
 * the same page. For a regular page with A/B test we would have 3 possible
 * URLs. /page-name, /page-name/a, /page-name/b.
 *
 * Cloudflare would have 3 cached pages. It would point to one of each
 * depending on a cookie or if no cookie is set, it will flip a coin to
 * chose one.
 *
 * The /page-name/<a | b> would only set the cookie and redirect to
 * /page-name, which will have the information of the experience also
 * in the server (getServerSideProps) by reading the cookie.
 *
 * Note: unfortunately AWS + serverless does not support Next.js middleware.
 * The solution with it is way more elegant.
 */

export async function getServerSideProps({ req }) {
  console.log("==== product req.cookies ====\n", req.cookies);

  // Get the experience from the middleware or from the cookie.
  // If none is set we can set a default value.
  const experience = req?.cookies?.experience ?? "none";

  return {
    props: { experience, serverTime: new Date().toISOString() },
  };
}
